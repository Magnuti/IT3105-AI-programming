# [triangle, diamond]
board_type: triangle

# 4-8 for triangle, 3-6 for diamond
board_size: 5

# Must be in the format [[y, x], [y, x], ...]
# or
# - [y, x]
# - [y, x]
# - ...
open_cell_positions:
  # [2, 1], [3, 1], [3, 2]
  - [2, 1]

episodes: 1000

# [table, nn]
critic_type: nn

# Dimension of critic's NN, number of layers and neurons in each layer except the input layer
# E.g. (5, 10, 1) gives 3 layers (2 hidden layers and one output layer) with 5, 10 and 1 neurons
# The input layer's size is automatically calculated based on the number of cells on the board
# nn_dims is required if critic: nn
nn_dims: [5, 1]
# nn_dims: [5, 5, 1]

# Remember that it is wise to use a "much lower" learning rate for the critic when it uses a neural network
learning_rate_critic: 0.001
learning_rate_actor: 0.195

eligibility_decay_critic: 0.85
eligibility_decay_actor: 0.85
discount_factor_critic: 0.85
discount_factor_actor: 0.85
epsilon: 1

# The rate in which the epsilon decreases as given by e <- e * epsilon_decay
# Not used for epsilon_decay_function: linear
epsilon_decay: 0.995

# How epsilon should decay [exponential, reversed_sigmoid, linear]
epsilon_decay_function: exponential

visualize: True
# List of training-episodes to visualize (episode 1 has index 0).
# The last episode will always be visualized and greedy, given that visualize is True.
visualize_training_episodes: []
# Delay between frames in seconds for visualization
frame_time: 0.5
